/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

import { onMount } from '../web_modules/svelte/index.mjs';
import { userStore } from '../scripts/stores.js';
import { userbaseStore } from '../scripts/stores.js';

function create_else_block(ctx) {
	let a0;
	let t0;
	let t1;
	let a1;
	let t2;

	return {
		c() {
			a0 = element("a");
			t0 = text("Sign up");
			t1 = space();
			a1 = element("a");
			t2 = text("Sign in");
			this.h();
		},
		l(nodes) {
			a0 = claim_element(nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Sign up");
			a0_nodes.forEach(detach);
			t1 = claim_space(nodes);
			a1 = claim_element(nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "Sign in");
			a1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "href", "user/register");
			attr(a0, "class", "svelte-1lnuvod");
			attr(a1, "href", "user/login");
			attr(a1, "class", "svelte-1lnuvod");
		},
		m(target, anchor) {
			insert(target, a0, anchor);
			append(a0, t0);
			insert(target, t1, anchor);
			insert(target, a1, anchor);
			append(a1, t2);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a0);
			if (detaching) detach(t1);
			if (detaching) detach(a1);
		}
	};
}

// (24:12) {#if user}
function create_if_block(ctx) {
	let a;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			t = text("Logout");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Logout");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "user/login");
			attr(a, "class", "svelte-1lnuvod");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*logout*/ ctx[1]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let div1;
	let span0;
	let a0;
	let img0;
	let img0_src_value;
	let t0;
	let t1;
	let span1;
	let a1;
	let img1;
	let img1_src_value;
	let t2;
	let div0;

	function select_block_type(ctx, dirty) {
		if (/*user*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			nav = element("nav");
			div1 = element("div");
			span0 = element("span");
			a0 = element("a");
			img0 = element("img");
			t0 = text("Plenti Userbase");
			t1 = space();
			span1 = element("span");
			a1 = element("a");
			img1 = element("img");
			t2 = space();
			div0 = element("div");
			if_block.c();
			this.h();
		},
		l(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div1 = claim_element(nav_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			span0 = claim_element(div1_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			a0 = claim_element(span0_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			img0 = claim_element(a0_nodes, "IMG", { alt: true, src: true, class: true });
			t0 = claim_text(a0_nodes, "Plenti Userbase");
			a0_nodes.forEach(detach);
			span0_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);
			span1 = claim_element(div1_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			a1 = claim_element(span1_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			img1 = claim_element(a1_nodes, "IMG", { alt: true, src: true, class: true });
			a1_nodes.forEach(detach);
			t2 = claim_space(span1_nodes);
			div0 = claim_element(span1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			if_block.l(div0_nodes);
			div0_nodes.forEach(detach);
			span1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img0, "alt", "lightning bolt logo");
			if (img0.src !== (img0_src_value = "assets/renewable-energy.svg")) attr(img0, "src", img0_src_value);
			attr(img0, "class", "svelte-1lnuvod");
			attr(a0, "href", ".");
			attr(a0, "class", "svelte-1lnuvod");
			attr(span0, "id", "brand");
			attr(span0, "class", "svelte-1lnuvod");
			attr(img1, "alt", "profile of person");
			if (img1.src !== (img1_src_value = "assets/user.svg")) attr(img1, "src", img1_src_value);
			attr(img1, "class", "svelte-1lnuvod");
			attr(a1, "href", "user");
			attr(a1, "class", "svelte-1lnuvod");
			attr(div0, "id", "sub-links");
			attr(div0, "class", "svelte-1lnuvod");
			attr(span1, "id", "links");
			attr(span1, "class", "svelte-1lnuvod");
			attr(div1, "class", "container svelte-1lnuvod");
			attr(nav, "class", "svelte-1lnuvod");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div1);
			append(div1, span0);
			append(span0, a0);
			append(a0, img0);
			append(a0, t0);
			append(div1, t1);
			append(div1, span1);
			append(span1, a1);
			append(a1, img1);
			append(span1, t2);
			append(span1, div0);
			if_block.m(div0, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let [user, loaded] = [null, false];

	onMount(async () => {
		loaded = true;
		userStore.subscribe(userObj => $$invalidate(0, user = userObj));
	});

	const logout = () => {
		userbaseStore.subscribe(userbase => {
			userbase.signOut();
			userStore.set(null);
		});
	};

	return [user, logout];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;