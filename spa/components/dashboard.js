/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import { onMount } from '../web_modules/svelte/index.mjs';
import { userbaseStore } from '../scripts/stores.js';
import { userStore } from '../scripts/stores.js';
import Key from './key.js';

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let t2;
	let key;
	let t3;
	let a;
	let t4;
	let current;
	let mounted;
	let dispose;
	key = new Key({});

	return {
		c() {
			h1 = element("h1");
			t0 = text("Welcome ");
			t1 = text(/*username*/ ctx[0]);
			t2 = space();
			create_component(key.$$.fragment);
			t3 = space();
			a = element("a");
			t4 = text("Logout");
			this.h();
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Welcome ");
			t1 = claim_text(h1_nodes, /*username*/ ctx[0]);
			h1_nodes.forEach(detach);
			t2 = claim_space(nodes);
			claim_component(key.$$.fragment, nodes);
			t3 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t4 = claim_text(a_nodes, "Logout");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "/user/login");
			attr(a, "class", "btn");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			append(h1, t1);
			insert(target, t2, anchor);
			mount_component(key, target, anchor);
			insert(target, t3, anchor);
			insert(target, a, anchor);
			append(a, t4);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*logout*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*username*/ 1) set_data(t1, /*username*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(key.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(key.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t2);
			destroy_component(key, detaching);
			if (detaching) detach(t3);
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let username;

	onMount(async () => {
		userStore.subscribe(user => {
			$$invalidate(0, username = user.username);
		});
	});

	const logout = () => {
		userbaseStore.subscribe(userbase => {
			userbase.signOut();
			userStore.set(null);
		});
	};

	return [username, logout];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;