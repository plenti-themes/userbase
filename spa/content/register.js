/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	handle_promise,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out,
	update_await_block_branch
} from '../web_modules/svelte/internal/index.mjs';

import { onMount } from '../web_modules/svelte/index.mjs';
import { completeUser } from '../scripts/form_validation.js';
import { completePass } from '../scripts/form_validation.js';
import { passMatch } from '../scripts/form_validation.js';
import { validEmail } from '../scripts/form_validation.js';
import FormErrs from '../components/form_errors.js';
import { userbaseStore } from '../scripts/stores.js';
import { userStore } from '../scripts/stores.js';
import { authPromiseStore } from '../scripts/stores.js';

function create_catch_block(ctx) {
	let t0;
	let t1_value = /*error*/ ctx[13] + "";
	let t1;

	return {
		c() {
			t0 = text("Error: ");
			t1 = text(t1_value);
		},
		l(nodes) {
			t0 = claim_text(nodes, "Error: ");
			t1 = claim_text(nodes, t1_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*authPromise*/ 128 && t1_value !== (t1_value = /*error*/ ctx[13] + "")) set_data(t1, t1_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (46:0) {:then _}
function create_then_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*loaded*/ ctx[6] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*loaded*/ ctx[6]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*loaded*/ 64) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (47:4) {#if loaded}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*user*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (50:8) {:else}
function create_else_block(ctx) {
	let form;
	let formerrs;
	let t0;
	let div0;
	let label0;
	let t1;
	let t2;
	let input0;
	let t3;
	let div1;
	let label1;
	let t4;
	let t5;
	let input1;
	let t6;
	let div2;
	let label2;
	let t7;
	let t8;
	let input2;
	let t9;
	let button;
	let t10;
	let t11;
	let div3;
	let t12;
	let a;
	let t13;
	let current;
	let mounted;
	let dispose;

	formerrs = new FormErrs({
			props: {
				validationErrs: /*validationErrs*/ ctx[4]
			}
		});

	return {
		c() {
			form = element("form");
			create_component(formerrs.$$.fragment);
			t0 = space();
			div0 = element("div");
			label0 = element("label");
			t1 = text("Email");
			t2 = space();
			input0 = element("input");
			t3 = space();
			div1 = element("div");
			label1 = element("label");
			t4 = text("Password");
			t5 = space();
			input1 = element("input");
			t6 = space();
			div2 = element("div");
			label2 = element("label");
			t7 = text("Confirm Password");
			t8 = space();
			input2 = element("input");
			t9 = space();
			button = element("button");
			t10 = text(/*buttonTxt*/ ctx[0]);
			t11 = space();
			div3 = element("div");
			t12 = text("Already have an account? ");
			a = element("a");
			t13 = text("Sign in");
			this.h();
		},
		l(nodes) {
			form = claim_element(nodes, "FORM", {});
			var form_nodes = children(form);
			claim_component(formerrs.$$.fragment, form_nodes);
			t0 = claim_space(form_nodes);
			div0 = claim_element(form_nodes, "DIV", {});
			var div0_nodes = children(div0);
			label0 = claim_element(div0_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t1 = claim_text(label0_nodes, "Email");
			label0_nodes.forEach(detach);
			t2 = claim_space(div0_nodes);
			input0 = claim_element(div0_nodes, "INPUT", { id: true, type: true });
			div0_nodes.forEach(detach);
			t3 = claim_space(form_nodes);
			div1 = claim_element(form_nodes, "DIV", {});
			var div1_nodes = children(div1);
			label1 = claim_element(div1_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t4 = claim_text(label1_nodes, "Password");
			label1_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			input1 = claim_element(div1_nodes, "INPUT", { id: true, type: true });
			div1_nodes.forEach(detach);
			t6 = claim_space(form_nodes);
			div2 = claim_element(form_nodes, "DIV", {});
			var div2_nodes = children(div2);
			label2 = claim_element(div2_nodes, "LABEL", { for: true });
			var label2_nodes = children(label2);
			t7 = claim_text(label2_nodes, "Confirm Password");
			label2_nodes.forEach(detach);
			t8 = claim_space(div2_nodes);
			input2 = claim_element(div2_nodes, "INPUT", { id: true, type: true });
			div2_nodes.forEach(detach);
			t9 = claim_space(form_nodes);
			button = claim_element(form_nodes, "BUTTON", { type: true });
			var button_nodes = children(button);
			t10 = claim_text(button_nodes, /*buttonTxt*/ ctx[0]);
			button_nodes.forEach(detach);
			t11 = claim_space(form_nodes);
			div3 = claim_element(form_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t12 = claim_text(div3_nodes, "Already have an account? ");
			a = claim_element(div3_nodes, "A", { href: true });
			var a_nodes = children(a);
			t13 = claim_text(a_nodes, "Sign in");
			a_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			form_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(label0, "for", "email");
			attr(input0, "id", "email");
			attr(input0, "type", "email");
			input0.required = true;
			attr(label1, "for", "password");
			attr(input1, "id", "password");
			attr(input1, "type", "password");
			input1.required = true;
			attr(label2, "for", "confirm-password");
			attr(input2, "id", "confirm-password");
			attr(input2, "type", "password");
			input2.required = true;
			attr(button, "type", "button");
			attr(a, "href", "/user/login");
			attr(div3, "class", "switch");
		},
		m(target, anchor) {
			insert(target, form, anchor);
			mount_component(formerrs, form, null);
			append(form, t0);
			append(form, div0);
			append(div0, label0);
			append(label0, t1);
			append(div0, t2);
			append(div0, input0);
			set_input_value(input0, /*username*/ ctx[1]);
			append(form, t3);
			append(form, div1);
			append(div1, label1);
			append(label1, t4);
			append(div1, t5);
			append(div1, input1);
			set_input_value(input1, /*password*/ ctx[2]);
			append(form, t6);
			append(form, div2);
			append(div2, label2);
			append(label2, t7);
			append(div2, t8);
			append(div2, input2);
			set_input_value(input2, /*confirmPass*/ ctx[3]);
			append(form, t9);
			append(form, button);
			append(button, t10);
			append(form, t11);
			append(form, div3);
			append(div3, t12);
			append(div3, a);
			append(a, t13);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[9]),
					listen(input1, "input", /*input1_input_handler*/ ctx[10]),
					listen(input2, "input", /*input2_input_handler*/ ctx[11]),
					listen(button, "click", /*signUp*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const formerrs_changes = {};
			if (dirty & /*validationErrs*/ 16) formerrs_changes.validationErrs = /*validationErrs*/ ctx[4];
			formerrs.$set(formerrs_changes);

			if (dirty & /*username*/ 2 && input0.value !== /*username*/ ctx[1]) {
				set_input_value(input0, /*username*/ ctx[1]);
			}

			if (dirty & /*password*/ 4 && input1.value !== /*password*/ ctx[2]) {
				set_input_value(input1, /*password*/ ctx[2]);
			}

			if (dirty & /*confirmPass*/ 8 && input2.value !== /*confirmPass*/ ctx[3]) {
				set_input_value(input2, /*confirmPass*/ ctx[3]);
			}

			if (!current || dirty & /*buttonTxt*/ 1) set_data(t10, /*buttonTxt*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(formerrs.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formerrs.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form);
			destroy_component(formerrs);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (48:8) {#if user}
function create_if_block_1(ctx) {
	let t_value = window.history.pushState("", "Login", "/user") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (44:20)      Loading... {:then _}
function create_pending_block(ctx) {
	let t;

	return {
		c() {
			t = text("Loading...");
		},
		l(nodes) {
			t = claim_text(nodes, "Loading...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let await_block_anchor;
	let promise;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 12,
		error: 13,
		blocks: [,,,]
	};

	handle_promise(promise = /*authPromise*/ ctx[7], info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		l(nodes) {
			await_block_anchor = empty();
			info.block.l(nodes);
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*authPromise*/ 128 && promise !== (promise = /*authPromise*/ ctx[7]) && handle_promise(promise, info)) {
				
			} else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let [buttonTxt, username, password, confirmPass, validationErrs] = ["Create account", "", "", "", []];

	const signUp = () => {
		$$invalidate(4, validationErrs = []);
		if (!completeUser(username)) $$invalidate(4, validationErrs = [...validationErrs, "Missing email address"]);
		if (!completePass(password)) $$invalidate(4, validationErrs = [...validationErrs, "Password must be at least 6 characters"]);
		if (!passMatch(password, confirmPass)) $$invalidate(4, validationErrs = [...validationErrs, "Passwords do not match"]);
		if (!validEmail(username)) $$invalidate(4, validationErrs = [...validationErrs, "Email not valid"]);

		if (validationErrs.length < 1) {
			$$invalidate(0, buttonTxt = "creating user...");

			userbaseStore.subscribe(userbase => {
				userbase.signUp({ username, password, rememberMe: "none" }).then(user => userStore.set(user)).then(() => window.history.pushState("", "Login", "/user")).catch(error => {
					$$invalidate(4, validationErrs = [...validationErrs, error.message]);
					$$invalidate(0, buttonTxt = "Create account");
				});
			});
		}
	};

	let [user, loaded] = [null, false];

	onMount(async () => {
		$$invalidate(6, loaded = true);
		userStore.subscribe(userObj => $$invalidate(5, user = userObj));
	});

	let authPromise;
	authPromiseStore.subscribe(aP => $$invalidate(7, authPromise = aP));

	function input0_input_handler() {
		username = this.value;
		$$invalidate(1, username);
	}

	function input1_input_handler() {
		password = this.value;
		$$invalidate(2, password);
	}

	function input2_input_handler() {
		confirmPass = this.value;
		$$invalidate(3, confirmPass);
	}

	return [
		buttonTxt,
		username,
		password,
		confirmPass,
		validationErrs,
		user,
		loaded,
		authPromise,
		signUp,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;