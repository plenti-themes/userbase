/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (8:4) {#each list as item}
function create_each_block(ctx) {
	let li;
	let strong;
	let t0_value = /*item*/ ctx[2].title + "";
	let t0;
	let t1;
	let t2;
	let a;
	let t3_value = /*item*/ ctx[2].link + "";
	let t3;
	let a_href_value;

	return {
		c() {
			li = element("li");
			strong = element("strong");
			t0 = text(t0_value);
			t1 = text(":");
			t2 = space();
			a = element("a");
			t3 = text(t3_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			strong = claim_element(li_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t0 = claim_text(strong_nodes, t0_value);
			t1 = claim_text(strong_nodes, ":");
			strong_nodes.forEach(detach);
			t2 = claim_space(li_nodes);
			a = claim_element(li_nodes, "A", { href: true, target: true, rel: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, t3_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*item*/ ctx[2].link);
			attr(a, "target", "blank");
			attr(a, "rel", "noopener noreferrer");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, strong);
			append(strong, t0);
			append(strong, t1);
			append(li, t2);
			append(li, a);
			append(a, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*list*/ 2 && t0_value !== (t0_value = /*item*/ ctx[2].title + "")) set_data(t0, t0_value);
			if (dirty & /*list*/ 2 && t3_value !== (t3_value = /*item*/ ctx[2].link + "")) set_data(t3, t3_value);

			if (dirty & /*list*/ 2 && a_href_value !== (a_href_value = /*item*/ ctx[2].link)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let ul;
	let each_value = /*list*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			t1 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);

			if (dirty & /*list*/ 2) {
				each_value = /*list*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { list } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("list" in $$props) $$invalidate(1, list = $$props.list);
	};

	return [title, list];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, list: 1 });
	}
}

export default Component;