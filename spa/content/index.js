/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let img0;
	let img0_src_value;
	let t0;
	let img1;
	let img1_src_value;
	let t1;
	let h1;
	let t2;
	let h2;
	let t3;
	let div;
	let t4;
	let t5;
	let a;
	let t6;

	return {
		c() {
			section = element("section");
			img0 = element("img");
			t0 = space();
			img1 = element("img");
			t1 = space();
			h1 = element("h1");
			t2 = space();
			h2 = element("h2");
			t3 = space();
			div = element("div");
			t4 = text(/*desc*/ ctx[2]);
			t5 = space();
			a = element("a");
			t6 = text(/*button*/ ctx[3]);
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			img0 = claim_element(section_nodes, "IMG", { src: true, alt: true });
			t0 = claim_space(section_nodes);
			img1 = claim_element(section_nodes, "IMG", { src: true, alt: true });
			t1 = claim_space(section_nodes);
			h1 = claim_element(section_nodes, "H1", {});
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach);
			t2 = claim_space(section_nodes);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			h2_nodes.forEach(detach);
			t3 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", {});
			var div_nodes = children(div);
			t4 = claim_text(div_nodes, /*desc*/ ctx[2]);
			div_nodes.forEach(detach);
			t5 = claim_space(section_nodes);
			a = claim_element(section_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t6 = claim_text(a_nodes, /*button*/ ctx[3]);
			a_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (img0.src !== (img0_src_value = "assets/perry.png")) attr(img0, "src", img0_src_value);
			attr(img0, "alt", "Plenti planarian");
			if (img1.src !== (img1_src_value = "assets/userbase.png")) attr(img1, "src", img1_src_value);
			attr(img1, "alt", "Userbase icon");
			attr(a, "href", "/user");
			attr(a, "class", "btn");
			attr(section, "class", "svelte-1shzb3t");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, img0);
			append(section, t0);
			append(section, img1);
			append(section, t1);
			append(section, h1);
			h1.innerHTML = /*title*/ ctx[0];
			append(section, t2);
			append(section, h2);
			h2.innerHTML = /*intro*/ ctx[1];
			append(section, t3);
			append(section, div);
			append(div, t4);
			append(section, t5);
			append(section, a);
			append(a, t6);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) h1.innerHTML = /*title*/ ctx[0];;
			if (dirty & /*intro*/ 2) h2.innerHTML = /*intro*/ ctx[1];;
			if (dirty & /*desc*/ 4) set_data(t4, /*desc*/ ctx[2]);
			if (dirty & /*button*/ 8) set_data(t6, /*button*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ intro } = $$props,
		{ desc } = $$props,
		{ button } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("intro" in $$props) $$invalidate(1, intro = $$props.intro);
		if ("desc" in $$props) $$invalidate(2, desc = $$props.desc);
		if ("button" in $$props) $$invalidate(3, button = $$props.button);
	};

	return [title, intro, desc, button];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, intro: 1, desc: 2, button: 3 });
	}
}

export default Component;